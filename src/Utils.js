/** @typedef {import('@api-components/api-view-model-transformer/src/ApiViewModel').ModelItem} ModelItem */

/**
 * Computes value for `renderEmptyMessage`.
 *
 * @param {boolean} allowCustom True if the form allows to add custom values.
 * @param {object[]} model Current model
 * @return {boolean} `true` when allowCustom is falsy set and model is empty
 */
export function canRenderEmptyMessage(allowCustom, model) {
  return !allowCustom && !model;
}

/**
 * Computes if model item is optional.
 * The items is always optional if is not required and when `hasOptional`
 * is set to `true`.
 *
 * @param {boolean} hasOptional [description]
 * @param {ModelItem} model Model item.
 * @return {boolean} `true` if the model item is optional in the form.
 */
export function isOptional(hasOptional, model) {
  if (!hasOptional) {
    return false;
  }
  if (!model || !model.required) {
    return true;
  }
  return false;
}

/**
 * Computes if given model item is a custom property (not generated by
 * AMF model transformation).
 * @param {ModelItem} model Model item.
 * @return {boolean} `true` if `isCustom` property is set on model's schema
 * property.
 */
export function isCustom(model) {
  if (!model || !model.schema || !model.schema.isCustom) {
    return false;
  }
  return true;
}

/**
 * Computes value for `renderOptionalCheckbox` property.
 *
 * @param {boolean} render Value of `allowHideOptional` property
 * @param {boolean} has Value of `hasOptional` property.
 * @return {boolean} True if both values are `true`.
 */
export function renderCheckbox(render, has) {
  return render && has;
}

/**
 * Computes if any of the parameters are required.
 * It iterates over the model to find any first element that has `required`
 * propeerty set to `false`.
 *
 * @param {boolean} allowHideOptional State of `allowHideOptional` property.
 * If `false` this function always returns `false`.
 * @param {ModelItem[]} model Current model
 * @return {boolean} `true` if model has at leas one alement that is not required.
 */
export function hasOptionalParameters(allowHideOptional, model) {
  if (!allowHideOptional || !model) {
    return false;
  }
  return model.some((item) => item.required === false);
}

/**
 * Computes class name for each form item depending on the item state.
 *
 * This method to be overriten by child classes.
 *
 * @param {ModelItem} item Model item
 * @param {boolean=} allowHideOptional
 * @param {boolean=} optionalOpened True if optional parameters are rendered.
 * @param {boolean=} allowDisableParams
 * @return {string}
 */
export function rowClass(
  item,
  allowHideOptional,
  optionalOpened,
  allowDisableParams
) {
  let clazz = 'param-value';
  if (item && item.required) {
    clazz += ' required';
  } else if (allowHideOptional) {
    clazz += ' optional';
  }
  if (optionalOpened) {
    clazz += ' with-optional';
  }
  if (allowDisableParams) {
    clazz += ' has-enable-button';
  }
  return clazz;
}
